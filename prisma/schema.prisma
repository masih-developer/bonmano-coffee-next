generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       Int      @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  user                     user     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model blog {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  blogtags  blogtags[]

  @@index([title], map: "Blog_title_idx")
}

model blogtags {
  id     Int  @id @default(autoincrement())
  blogId Int
  tagId  Int
  blog   blog @relation(fields: [blogId], references: [id], onDelete: Cascade, map: "BlogTags_blogId_fkey")
  tag    tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "BlogTags_tagId_fkey")

  @@unique([blogId, tagId], map: "BlogTags_blogId_tagId_key")
  @@index([tagId], map: "BlogTags_tagId_fkey")
}

model category {
  id             Int           @id @default(autoincrement())
  name           String
  parentId       Int?
  type           category_type
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  category       category?     @relation("categoryTocategory", fields: [parentId], references: [id], map: "Category_parentId_fkey")
  other_category category[]    @relation("categoryTocategory")
  product        product[]

  @@index([parentId], map: "Category_parentId_idx")
}

model comment {
  id        Int      @id @default(autoincrement())
  author    String
  text      String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  product   product  @relation(fields: [productId], references: [id], map: "Comment_productId_fkey")

  @@index([productId], map: "Comment_productId_idx")
}

model faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  product   product  @relation(fields: [productId], references: [id], map: "Faq_productId_fkey")

  @@index([productId], map: "Faq_productId_idx")
}

model order {
  id                 Int                  @id @default(autoincrement())
  totalPrice         Float
  orderStatus        order_orderStatus
  orderDate          DateTime             @default(now())
  paymentStatus      order_paymentStatus
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  user               user                 @relation(fields: [userId], references: [id], map: "Order_userId_fkey")
  orderitem          orderitem[]
  orderstatushistory orderstatushistory[]
  payment            payment[]

  @@index([userId], map: "Order_userId_fkey")
}

model orderitem {
  id             Int      @id @default(autoincrement())
  productName    String
  quantity       Int
  price          Float
  totalItemPrice Float
  orderId        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  order          order    @relation(fields: [orderId], references: [id], map: "OrderItem_orderId_fkey")

  @@index([orderId], map: "OrderItem_orderId_fkey")
}

model orderstatushistory {
  id         Int                       @id @default(autoincrement())
  status     orderstatushistory_status
  statusDate DateTime                  @default(now())
  orderId    Int
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime
  order      order                     @relation(fields: [orderId], references: [id], map: "OrderStatusHistory_orderId_fkey")

  @@index([orderId], map: "OrderStatusHistory_orderId_fkey")
}

model payment {
  id            Int                   @id @default(autoincrement())
  amount        Float
  paymentDate   DateTime              @default(now())
  paymentMethod payment_paymentMethod
  paymentStatus payment_paymentStatus
  orderId       Int
  createdAt     DateTime              @default(now())
  updatedAt     DateTime
  order         order                 @relation(fields: [orderId], references: [id], map: "Payment_orderId_fkey")

  @@index([orderId], map: "Payment_orderId_fkey")
}

model product {
  id              Int               @id @default(autoincrement())
  name            String
  price           Float
  quantity        Int
  description     String?
  rating          Float?
  image           String?
  weight          Float?
  height          Float?
  dimensions      String?
  categoryId      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  comment         comment[]
  faq             faq[]
  category        category          @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  productgallerty productgallerty[]
  producttags     producttags[]

  @@index([categoryId], map: "Product_categoryId_idx")
}

model productgallerty {
  id        Int      @id @default(autoincrement())
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  product   product? @relation(fields: [productId], references: [id], map: "ProductGallerty_productId_fkey")

  @@index([productId], map: "ProductGallerty_productId_fkey")
}

model producttags {
  id        Int     @id @default(autoincrement())
  productId Int
  tagId     Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "ProductTags_productId_fkey")
  tag       tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "ProductTags_tagId_fkey")

  @@unique([productId, tagId], map: "ProductTags_productId_tagId_key")
  @@index([tagId], map: "ProductTags_tagId_fkey")
}

model tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique(map: "Tag_name_key")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  blogtags    blogtags[]
  producttags producttags[]

  @@index([name], map: "Tag_name_idx")
}

model user {
  id              Int       @id @default(autoincrement())
  username        String    @unique(map: "User_username_key") @db.VarChar(30)
  email           String    @unique(map: "User_email_key") @db.VarChar(255)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  phone           String    @unique(map: "User_phone_key") @db.VarChar(11)
  role            user_role @default(USER)
  firstname       String    @db.VarChar(50)
  isEmailVerified Boolean
  isPhoneVerified Boolean   @default(false)
  lastname        String    @db.VarChar(50)
  account         account[]
  order           order[]
}

enum orderstatushistory_status {
  COMPLETED
  CANCELLED
  PENDING
  IN_PROGRESS
}

enum order_orderStatus {
  COMPLETED
  CANCELLED
  PENDING
  IN_PROGRESS
}

enum category_type {
  blog
  product
}

enum payment_paymentMethod {
  CREDIT_CARD
  ONLINE_PAYMENT
  CASH
}

enum order_paymentStatus {
  PAID
  PENDING
}

enum payment_paymentStatus {
  PAID
  PENDING
}

enum user_role {
  ADMIN
  USER
}
