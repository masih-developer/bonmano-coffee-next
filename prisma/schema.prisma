// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  first_name    String    @db.VarChar(50)
  last_name     String    @db.VarChar(50)
  username      String    @unique @db.VarChar(30)
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  password      String    @db.VarChar(60)
  phone         String    @unique @db.VarChar(11)
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  accessToken  String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  price       Float
  stock       Int
  description String?
  rating      Float?
  image       String?
  weight      Float?
  height      Float?
  dimensions  String?

  category   Category     @relation(fields: [categoryId], references: [id])
  categoryId Int
  faqs       Faq[]
  comments   Comment[]
  ProductTag ProductTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Blog {
  id      Int    @id @default(autoincrement())
  title   String
  content String

  BlogTag BlogTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  productTags ProductTag[]
  blogTags    BlogTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model ProductTag {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     Int

  @@unique([productId, tagId])
}

model BlogTag {
  id     Int  @id @default(autoincrement())
  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogId Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId  Int

  @@unique([blogId, tagId])
}

model Faq {
  id        Int    @id @default(autoincrement())
  question  String
  answer    String
  productId Int

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Comment {
  id        Int    @id @default(autoincrement())
  author    String
  text      String
  productId Int

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Category {
  id       Int          @id @default(autoincrement())
  name     String
  parent   Category?    @relation("CategoryParent", fields: [parentId], references: [id])
  parentId Int?
  type     CategoryType
  children Category[]   @relation("CategoryParent")
  Product  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
}

enum CategoryType {
  article
  product
}
